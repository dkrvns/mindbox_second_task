#version: '3.8'
#
#services:
#  api:
#    profiles: [ "api" ]
#    container_name: web_api.api
#    image: web_api
#    build:
#      context: ..
#      dockerfile: Dockerfile
#    ports:
#      - "8000:8000"
#    command: ["python", "main.py"]
#    depends_on:
#      - postgres
#    environment:
#      - CONFIG_PATH=${CONFIG_PATH:-./config/config.template.toml}
#    volumes:
#      - ..:/app/
#    networks:
#      - web_app
#
#  postgres_migration:
#    profiles: [ "migration" ]
#    container_name: web_api.postgres_migration
#    image: web_api
#    build:
#      context: ..
#    depends_on:
#      - postgres
#    networks:
#      - web_app
#    volumes:
#      - ..:/app/
#    environment:
#      - CONFIG_PATH=${CONFIG_PATH:-./config/config.template.toml}
#    command: [ "python", "-m", "alembic", "upgrade", "head" ]
#
#  postgres:
#    profiles: [ "api", "migration" ]
#    container_name: web_api.postgres
#    image: "postgres:16-alpine"
#    restart: unless-stopped
#    expose:
#      - "5432"
#    ports:
#      - "5432:5432"
#    networks:
#      - web_app
#    environment:
#      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
#      POSTGRES_USER: $POSTGRES_USER
#      POSTGRES_DB: $POSTGRES_DB
#    volumes:
#      - web_api.postgres.data:/var/lib/postgresql/users:rw
#
#volumes:
#  web_api.postgres.data: {}
#
#networks:
#  web_app: {}


services:
  api:
    profiles: [ "api" ]
    container_name: web_app.api
    image: web_app
    build:
      context: ..
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - web_app.postgres.network
    volumes:
      - ..:/app/
    environment:
      - CONFIG_PATH=${CONFIG_PATH:-./config/config.template.toml}
    command: ["python", "main.py"]
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsSL http://localhost:8000/healthcheck" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  postgres_migration:
    profiles: [ "migration" ]
    container_name: web_app.postgres_migration
    image: web_app
    build:
      context: ..
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - web_app.postgres.network
    volumes:
      - ..:/app/
    environment:
      - CONFIG_PATH=${CONFIG_PATH:-./config/config.template.toml}
    command: ["python", "-m", "alembic", "upgrade", "head"]

  postgres:
    profiles: [ "api", "migration" ]
    container_name: web_app.postgres
    image: "postgres:17-alpine"
    hostname: web_app.postgres
    restart: unless-stopped
    expose:
      - "5432"
    ports:
      - "5432:5432"
    networks:
      - web_app.postgres.network
    environment:
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_USER: ${POSTGRES_USER:-$USER}
      POSTGRES_DB: ${POSTGRES_DB:-$USER}
    volumes:
      - web_app.postgres.data:/var/lib/postgresql/users:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

volumes:
  web_app.postgres.data:
    name: web_app.postgres.data

networks:
  web_app.postgres.network:
    name: web_app.postgres.network
